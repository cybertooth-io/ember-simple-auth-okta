{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-simple-auth-okta","attributes":{"name":"ember-simple-auth-okta","version":"0.0.1-alpha.4","navigationIndex":[{"type":"classes","items":[{"id":"ember-simple-auth-okta/authenticators/okta~Okta","path":"modules/ember-simple-auth-okta/authenticators/okta~Okta","name":"Okta"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"ember-simple-auth-okta/authenticators/okta"}]}}},"included":[{"type":"class","id":"ember-simple-auth-okta/authenticators/okta~Okta","attributes":{"name":"Okta","file":"ember-simple-auth-okta/authenticators/okta","exportType":"default","description":"<div class=\"docs-md\"><p>An <strong>Ember Simple Auth</strong> <code>Authenticator</code> implementation that wraps Okta&#39;s\n<code>okta-auth-js</code> module to authenticate with their identity servers.  Authentication\nwill persist tokens in local storage facilitated through Ember Simple Auth.  Tokens\nwill be refreshed by an <strong>Ember Concurrency</strong> task that waits until expiry time\nbefore triggering the refresh.</p></div>","lineNumber":20,"access":"public","isInterface":false,"decorators":[],"tags":[{"name":"class","value":"Okta"},{"name":"module","value":"ember-simple-auth-okta/authenticators/okta"},{"name":"uses","value":"Ember.Evented"}],"fields":[{"name":"_client","description":"<div class=\"docs-md\"><p>The Okta client instantiated in the constructor</p></div>","lineNumber":27,"access":"private","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","type":"OktaAuth","isStatic":false,"decorators":[]},{"name":"configuration","description":"<div class=\"docs-md\"><p>The <code>configuration</code> service is used to lookup the Okta configuration\nfrom our Application&#39;s <code>config/environment.js</code> files <code>APP</code> section.\nSee configuration.md.</p></div>","lineNumber":34,"access":"public","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","type":"Configuration","isStatic":false,"decorators":[{"name":"service","arguments":null}]},{"name":"_renewTokensBeforeExpiry","description":"<div class=\"docs-md\"><p>A task that will wait until expiry before triggering a full restore of the session.</p></div>","lineNumber":50,"access":"private","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","type":"Task","isStatic":false,"decorators":[{"name":"task","arguments":"(function* (exp) {\n  const wait = exp * 1000 - Date.now();\n  console.warn('Scheduled authentication token refresh will occur at ', new Date(exp * 1000));\n  yield timeout(wait);\n  console.warn('Commencing refresh of the authentication tokens at ', new Date());\n  return getOwner(this).lookup('session:main').restore(); // TODO: this.restore() won't work...ideally use `this.trigger('sessionDataUpdated')` but the evented approach is not firing!\n})"}]}],"methods":[{"name":"_isExpired","description":"","lineNumber":66,"access":"private","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","returns":{"type":"boolean","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"expiresAtInSeconds","description":"","type":"any"}],"isAsync":false,"isGenerator":false,"isStatic":true,"decorators":[]},{"name":"restore","description":"<div class=\"docs-md\"><p>Restores the session from a session data object. <strong>This method is invoked\nby the session either on application startup if session data is restored\nfrom the session store</strong> or when properties in the store change due to\nexternal events (e.g. in another tab) and the new session data needs to be\nvalidated for whether it constitutes an authenticated session.</p>\n<p><strong>This method returns a promise. A resolving promise results in the session\nbecoming or remaining authenticated.</strong> Any data the promise resolves with\nwill be saved in and accessible via the session service&#39;s\n<code>data.authenticated</code> property (see\n{{#crossLink &quot;SessionService/data:property&quot;}}{{/crossLink}}). A rejecting\npromise indicates that <code>data</code> does not constitute a valid session and will\nresult in the session being invalidated or remaining unauthenticated.</p>\n<p>The <code>BaseAuthenticator</code>&#39;s implementation always returns a rejecting\npromise. <strong>This method must be overridden in subclasses.</strong></p></div>","lineNumber":94,"access":"public","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","returns":{"type":"Promise<{idToken: {Object}, accessToken: {Object}}>","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"data","description":"The data from ember-simple-auth storage that was collected during\nauthenticate (or the last restore).  In our implementations case we'll always get the\naccessToken and then the idToken.  Each will be passed to the Okta Client to `renew`</code>`.","type":"Object"}],"isAsync":true,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"authenticate","description":"<div class=\"docs-md\"><p>Authenticates the session with the specified <code>args</code>. These options vary\ndepending on the actual authentication mechanism the authenticator\nimplements (e.g. a set of credentials or a Facebook account id etc.). <strong>The\nsession will invoke this method in order to authenticate itself</strong> (see\n{{#crossLink &quot;SessionService/authenticate:method&quot;}}{{/crossLink}}).</p>\n<p><strong>This method returns a promise. A resolving promise will result in the\nsession becoming authenticated.</strong> Any data the promise resolves with will\nbe saved in and accessible via the session service&#39;s <code>data.authenticated</code>\nproperty (see {{#crossLink &quot;SessionService/data:property&quot;}}{{/crossLink}}).\nA rejecting promise indicates that authentication failed and will result in\nthe session remaining unauthenticated.</p>\n<p>The <code>BaseAuthenticator</code>&#39;s implementation always returns a rejecting promise\nand thus never authenticates the session. <strong>This method must be overridden\nin subclasses</strong>.</p></div>","lineNumber":131,"access":"public","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","returns":{"type":"Promise<{idToken: {Object}, accessToken: {Object}}>","description":"","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"username","description":"the user name (typically an email address)","type":"String"},{"nullable":null,"spread":false,"optional":false,"name":"password","description":"the user's password","type":"String"}],"isAsync":true,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"invalidate","description":"<div class=\"docs-md\"><p>This method is invoked as a callback when the session is invalidated. While\nthe session will invalidate itself and clear all authenticated session data,\nit might be necessary for some authenticators to perform additional tasks\n(e.g. invalidating an access token on the server side).</p>\n<p><strong>This method returns a promise. A resolving promise will result in the\nsession becoming unauthenticated.</strong> A rejecting promise will result in\ninvalidation being intercepted and the session remaining authenticated.</p>\n<p>The <code>BaseAuthenticator</code>&#39;s implementation always returns a resolving promise\nand thus never intercepts session invalidation. <strong>This method doesn&#39;t have\nto be overridden in custom authenticators</strong> if no actions need to be\nperformed on session invalidation.</p></div>","lineNumber":171,"access":"public","tags":[],"file":"ember-simple-auth-okta/authenticators/okta","returns":{"type":"Ember.RSVP.Promise","description":"A promise that when it resolves results in the session being invalidated","properties":[]},"params":[{"nullable":null,"spread":false,"optional":false,"name":"data","description":"The data from ember-simple-auth storage that was collected during\nauthenticate (or the last restore).  In our implementations case we'll always be passed a hash\nwith the `accessToken` and the `idToken`.  This parameter is ignored for this Okta implementation.","type":"Object"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":"*"},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-simple-auth-okta/authenticators/okta","attributes":{"file":"ember-simple-auth-okta/authenticators/okta","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-simple-auth-okta/authenticators/okta~Okta"}]},"components":{"data":[]}}}]}
